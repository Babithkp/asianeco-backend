// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userName      String @unique
  password      String
  purchaseValue BigInt
}

model Settings {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  address                String
  contactNumber          String
  alternateContactNumber String
  email                  String
  website                String
  GSTIN                  String
  HSN                    String
  bankName               String
  AccountNo              String
  IFSC                   String
  invoiceSequence        Int    @default(1000)
  quotationSequence      Int    @default(1000)
  expenseSequence        Int    @default(1000)
}

model Client {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  GSTIN         String
  contactPerson String
  email         String
  contactNumber String
  address       String
  city          String
  state         String
  pincode       Int
  creditLimit   Float
  outstanding   Float     @default(0)
  quotations    Quote[]
  invoices      Invoice[]
}

model Expenses {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  expenseId     String   @unique
  title         String
  date          DateTime
  category      String
  amount        Float
  amountInWords String
  paymentType   String
  transactionId String
  description   String
}

model Quote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  quoteId  String
  date     DateTime
  dueDate  DateTime
  amount   Float
  items    Item[]
  Client   Client?  @relation(fields: [clientId], references: [id])
  clientId String?  @db.ObjectId
}

model Item {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  itemName      String
  category      String
  supplerName   String
  purchasePrice Float
  sellingPrice  Float
  measurement   String
  purchaseQty   Float
  tax           String
  description   String
  Invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId     String?  @db.ObjectId
  Quote         Quote?   @relation(fields: [quoteId], references: [id])
  quoteId       String?  @db.ObjectId
}

model Invoice {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId     String
  date          DateTime
  dueDate       DateTime
  discount      String
  status        String
  total         Float
  items         Item[]
  payments      Payments[]
  pendingAmount Float      @default(0)
  Client        Client?    @relation(fields: [clientId], references: [id])
  clientId      String?    @db.ObjectId
}

model Payments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String 
  date          DateTime
  clientName    String
  amount        Float
  amountInWords String
  pendingAmount Float
  transactionId String
  paymentMode   String
  remarks       String
  Invoice       Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId     String?  @db.ObjectId
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  message     String
  description String?
  status      String   @default("unread")
  createdAt   DateTime @default(now())
}
